From b56c3189025eb3b428ee634a590ec91abbf8a531 Mon Sep 17 00:00:00 2001
From: John Clark <inindev@gmail.com>
Date: Sat, 17 May 2025 18:02:15 -0400
Subject: [PATCH 1/4] net: phy: maxio: mae0621a driver

Signed-off-by: John Clark <inindev@gmail.com>
---
 drivers/net/phy/Kconfig  |   5 +
 drivers/net/phy/Makefile |   1 +
 drivers/net/phy/maxio.c  | 598 +++++++++++++++++++++++++++++++++++++++
 3 files changed, 604 insertions(+)
 create mode 100644 drivers/net/phy/maxio.c

diff --git a/drivers/net/phy/Kconfig b/drivers/net/phy/Kconfig
index 392749aae..a7d95546b 100644
--- a/drivers/net/phy/Kconfig
+++ b/drivers/net/phy/Kconfig
@@ -271,6 +271,11 @@ config MARVELL_88X2222_PHY
 	  Support for the Marvell 88X2222 Dual-port Multi-speed Ethernet
 	  Transceiver.
 
+config MAXIO_PHY
+	tristate "Maxio MAE0621A PHY"
+	help
+	  Supports the Maxio MAExxxx PHY.
+
 config MAXLINEAR_GPHY
 	tristate "Maxlinear Ethernet PHYs"
 	select POLYNOMIAL if HWMON
diff --git a/drivers/net/phy/Makefile b/drivers/net/phy/Makefile
index b4795aaf9..d9454b6af 100644
--- a/drivers/net/phy/Makefile
+++ b/drivers/net/phy/Makefile
@@ -68,6 +68,7 @@ obj-$(CONFIG_MARVELL_10G_PHY)	+= marvell10g.o
 obj-$(CONFIG_MARVELL_PHY)	+= marvell.o
 obj-$(CONFIG_MARVELL_88Q2XXX_PHY)	+= marvell-88q2xxx.o
 obj-$(CONFIG_MARVELL_88X2222_PHY)	+= marvell-88x2222.o
+obj-$(CONFIG_MAXIO_PHY)		+= maxio.o
 obj-$(CONFIG_MAXLINEAR_GPHY)	+= mxl-gpy.o
 obj-$(CONFIG_MAXLINEAR_86110_PHY)	+= mxl-86110.o
 obj-y				+= mediatek/
diff --git a/drivers/net/phy/maxio.c b/drivers/net/phy/maxio.c
new file mode 100644
index 000000000..3173d24d2
--- /dev/null
+++ b/drivers/net/phy/maxio.c
@@ -0,0 +1,598 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * drivers/net/phy/maxio.c
+ *
+ * Driver for Maxio PHYs
+ *
+ * Author: Zhao Yang <yang_zhao@maxio-tech.com>
+ * Author: John Clark <inindev@gmail.com>
+ *
+ * Copyright (c) 2021 Maxio Technology, Inc.
+ * Copyright (c) 2025 John Clark <inindev@gmail.com>
+ */
+
+#include <linux/bitops.h>
+#include <linux/phy.h>
+#include <linux/module.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/clk.h>
+
+#define MAXIO_PHY_VER				"v1.7.6.1"
+#define MAXIO_PHY_MAE0621A_Q2C_ID		0x7b744411
+#define MAXIO_PHY_MAE0621A_Q3C_ID		0x7b744412
+#define MAXIO_PAGE_SELECT			0x1f
+#define MAXIO_MAE0621A_CLK_MODE_REG		0x02
+#define MAXIO_MAE0621A_WORK_STATUS_REG		0x1d
+
+#define MAXIO_MAE0621A_LCR_LED2_ACT		BIT(14)
+#define MAXIO_MAE0621A_LCR_LED2_LINK1000	BIT(13)
+#define MAXIO_MAE0621A_LCR_LED2_LINK100		BIT(11)
+#define MAXIO_MAE0621A_LCR_LED2_LINK10		BIT(10)
+#define MAXIO_MAE0621A_LCR_LED1_ACT		BIT(9)
+#define MAXIO_MAE0621A_LCR_LED1_LINK1000	BIT(8)
+#define MAXIO_MAE0621A_LCR_LED1_LINK100		BIT(6)
+#define MAXIO_MAE0621A_LCR_LED1_LINK10		BIT(5)
+
+/* register definitions */
+#define MAXIO_MDC_CONFIG			0xf13
+#define MAXIO_AUTO_DOWNSHIFT			0x300
+#define MAXIO_ANE_ADJ1				0x1555
+#define MAXIO_ANE_ADJ2				0x2b15
+#define MAXIO_ANE_ADJ3				0x7bc
+#define MAXIO_ANE_ADJ4				0x2500
+#define MAXIO_ANE_ADJ5				0x6880
+#define MAXIO_ANE_ADJ6				0xa
+#define MAXIO_ANE_ADJ7				0x5b00
+#define MAXIO_CLKOUT_125MHZ			0x823
+
+struct maxio_priv {
+	struct clk *refclk;
+};
+
+static int maxio_read_paged(struct phy_device *phydev, int page, u32 regnum);
+static int maxio_write_paged(struct phy_device *phydev, int page, u32 regnum, u16 val);
+static int maxio_adcc_check(struct phy_device *phydev);
+static int maxio_self_check(struct phy_device *phydev, int checknum);
+static int maxio_mae0621a_clk_init(struct phy_device *phydev);
+
+static int maxio_read_paged(struct phy_device *phydev, int page, u32 regnum)
+{
+	int ret, oldpage;
+
+	oldpage = phy_read(phydev, MAXIO_PAGE_SELECT);
+	if (oldpage < 0)
+		return oldpage;
+
+	phy_write(phydev, MAXIO_PAGE_SELECT, page);
+	ret = phy_read(phydev, regnum);
+	phy_write(phydev, MAXIO_PAGE_SELECT, oldpage);
+
+	return ret;
+}
+
+static int maxio_write_paged(struct phy_device *phydev, int page, u32 regnum, u16 val)
+{
+	int ret, oldpage;
+
+	oldpage = phy_read(phydev, MAXIO_PAGE_SELECT);
+	if (oldpage < 0)
+		return oldpage;
+
+	phy_write(phydev, MAXIO_PAGE_SELECT, page);
+	ret = phy_write(phydev, regnum, val);
+	phy_write(phydev, MAXIO_PAGE_SELECT, oldpage);
+
+	return ret;
+}
+
+static int maxio_mae0621a_clk_init(struct phy_device *phydev)
+{
+	u32 workmode, clkmode, oldpage;
+
+	oldpage = phy_read(phydev, MAXIO_PAGE_SELECT);
+	if (oldpage < 0)
+		return oldpage;
+
+	/* soft reset */
+	phy_write(phydev, MAXIO_PAGE_SELECT, 0x0);
+	phy_write(phydev, MII_BMCR, BMCR_RESET | BMCR_ANENABLE);
+
+	/* get work mode */
+	phy_write(phydev, MAXIO_PAGE_SELECT, 0xa43);
+	workmode = phy_read(phydev, MAXIO_MAE0621A_WORK_STATUS_REG);
+	if (workmode < 0)
+		return workmode;
+
+	/* get clock mode */
+	phy_write(phydev, MAXIO_PAGE_SELECT, 0xd92);
+	clkmode = phy_read(phydev, MAXIO_MAE0621A_CLK_MODE_REG);
+	if (clkmode < 0)
+		return clkmode;
+
+	/* configure clock mode (oscillator vs. crystal) */
+	if (!(workmode & BIT(5))) {
+		if (!(clkmode & BIT(8))) {
+			/* switch to oscillator */
+			phy_write(phydev, MAXIO_MAE0621A_CLK_MODE_REG, clkmode | BIT(8));
+		} else {
+			/* switch to crystal */
+			phy_write(phydev, MAXIO_MAE0621A_CLK_MODE_REG, clkmode & ~BIT(8));
+		}
+	}
+
+	/* restore page and configure leds */
+	phy_write(phydev, MAXIO_PAGE_SELECT, 0x0);
+	phy_write(phydev, MAXIO_PAGE_SELECT, oldpage);
+	maxio_write_paged(phydev, 0xd04, 0x10,
+			  MAXIO_MAE0621A_LCR_LED2_ACT |
+			  MAXIO_MAE0621A_LCR_LED2_LINK1000 |
+			  MAXIO_MAE0621A_LCR_LED1_LINK1000 |
+			  MAXIO_MAE0621A_LCR_LED1_LINK100 |
+			  MAXIO_MAE0621A_LCR_LED1_LINK10);
+
+	msleep(10);
+
+	return 0;
+}
+
+static int maxio_read_mmd(struct phy_device *phydev, int devnum, u16 regnum)
+{
+	int ret, oldpage;
+
+	if (devnum != MDIO_MMD_AN || regnum != MDIO_AN_EEE_ADV)
+		return -EOPNOTSUPP;
+
+	oldpage = phy_read(phydev, MAXIO_PAGE_SELECT);
+	if (oldpage < 0)
+		return oldpage;
+
+	phy_write(phydev, MAXIO_PAGE_SELECT, 0);
+	phy_write(phydev, 0xd, MDIO_MMD_AN);
+	phy_write(phydev, 0xe, MDIO_AN_EEE_ADV);
+	phy_write(phydev, 0xd, 0x4000 | MDIO_MMD_AN);
+	ret = phy_read(phydev, 0x0e);
+	phy_write(phydev, MAXIO_PAGE_SELECT, oldpage);
+
+	return ret;
+}
+
+static int maxio_write_mmd(struct phy_device *phydev, int devnum, u16 regnum, u16 val)
+{
+	int ret = 0, oldpage;
+
+	if (devnum != MDIO_MMD_AN || regnum != MDIO_AN_EEE_ADV)
+		return -EOPNOTSUPP;
+
+	oldpage = phy_read(phydev, MAXIO_PAGE_SELECT);
+	if (oldpage < 0)
+		return oldpage;
+
+	phy_write(phydev, MAXIO_PAGE_SELECT, 0);
+	ret = phy_write(phydev, 0xd, MDIO_MMD_AN);
+	if (!ret)
+		ret = phy_write(phydev, 0xe, MDIO_AN_EEE_ADV);
+	if (!ret)
+		ret = phy_write(phydev, 0xd, 0x4000 | MDIO_MMD_AN);
+	if (!ret)
+		ret = phy_write(phydev, 0xe, val);
+	if (!ret) {
+		msleep(5);
+		ret = genphy_restart_aneg(phydev);
+	}
+	phy_write(phydev, MAXIO_PAGE_SELECT, oldpage);
+
+	return ret;
+}
+
+static int maxio_adcc_check(struct phy_device *phydev)
+{
+	int ret = 0, adcvalue, i;
+	u32 regval;
+
+	maxio_write_paged(phydev, 0xd96, 0x2, 0x1fff);
+	maxio_write_paged(phydev, 0xd96, 0x2, 0x1000);
+
+	for (i = 0; i < 4; i++) {
+		regval = 0xf908 + i * 0x100;
+		maxio_write_paged(phydev, 0xd8f, 0xb, regval);
+		adcvalue = maxio_read_paged(phydev, 0xd92, 0xb);
+		if (adcvalue < 0)
+			return adcvalue;
+		if (!(adcvalue & 0x1ff)) {
+			ret = -EIO;
+			break;
+		}
+	}
+
+	return ret;
+}
+
+static int maxio_self_check(struct phy_device *phydev, int checknum)
+{
+	struct device *dev = &phydev->mdio.dev;
+	int ret, i;
+
+	for (i = 0; i < checknum; i++) {
+		ret = maxio_adcc_check(phydev);
+		if (!ret) {
+			dev_info(dev, "MAE0621A READY\n");
+			break;
+		}
+		maxio_write_paged(phydev, 0x0, 0x0, 0x1940);
+		phy_write(phydev, MAXIO_PAGE_SELECT, 0x0);
+		msleep(5);
+		maxio_write_paged(phydev, 0x0, 0x0, 0x1140);
+		maxio_write_paged(phydev, 0x0, 0x0, 0x9140);
+	}
+
+	maxio_write_paged(phydev, 0xd96, 0x2, 0xfff);
+	maxio_write_paged(phydev, 0x0, 0x0, 0x9140);
+	phy_write(phydev, MAXIO_PAGE_SELECT, 0x0);
+
+	return ret;
+}
+
+static int maxio_mae0621a_config_aneg(struct phy_device *phydev)
+{
+	return genphy_config_aneg(phydev);
+}
+
+static int maxio_mae0621a_config_init(struct phy_device *phydev)
+{
+	struct maxio_priv *priv = phydev->priv;
+	struct device *dev = &phydev->mdio.dev;
+	int ret;
+
+	/* enable reference clock */
+	if (priv->refclk) {
+		ret = clk_prepare_enable(priv->refclk);
+		if (ret) {
+			dev_err(dev, "Failed to enable reference clock: %d\n", ret);
+			return ret;
+		}
+	}
+
+	/* mdc configuration */
+	ret = maxio_write_paged(phydev, 0xda0, 0x10, MAXIO_MDC_CONFIG);
+	if (ret)
+		goto err_clk;
+
+	ret = maxio_mae0621a_clk_init(phydev);
+	if (ret)
+		goto err_clk;
+
+	/* disable eee */
+	ret = maxio_write_mmd(phydev, MDIO_MMD_AN, MDIO_AN_EEE_ADV, 0);
+	if (ret)
+		goto err_clk;
+
+	phy_remove_link_mode(phydev, ETHTOOL_LINK_MODE_100baseT_Full_BIT);
+	phy_remove_link_mode(phydev, ETHTOOL_LINK_MODE_1000baseT_Full_BIT);
+
+	/* enable auto downshift */
+	ret = maxio_write_paged(phydev, 0xd8f, 0x0, MAXIO_AUTO_DOWNSHIFT);
+	if (ret)
+		goto err_clk;
+
+	/* adjust ane */
+	ret = maxio_write_paged(phydev, 0xd90, 0x2, MAXIO_ANE_ADJ1);
+	if (ret)
+		goto err_clk;
+	ret = maxio_write_paged(phydev, 0xd90, 0x5, MAXIO_ANE_ADJ2);
+	if (ret)
+		goto err_clk;
+	ret = maxio_write_paged(phydev, 0xd96, 0x13, MAXIO_ANE_ADJ3);
+	if (ret)
+		goto err_clk;
+	ret = maxio_write_paged(phydev, 0xd8f, 0x8, MAXIO_ANE_ADJ4);
+	if (ret)
+		goto err_clk;
+	ret = maxio_write_paged(phydev, 0xd91, 0x6, MAXIO_ANE_ADJ5);
+	if (ret)
+		goto err_clk;
+	ret = maxio_write_paged(phydev, 0xd92, 0x14, MAXIO_ANE_ADJ6);
+	if (ret)
+		goto err_clk;
+	ret = maxio_write_paged(phydev, 0xd91, 0x7, MAXIO_ANE_ADJ7);
+	if (ret)
+		goto err_clk;
+
+	/* configure 125 mhz clock output */
+	ret = maxio_write_paged(phydev, 0xa43, 0x19, MAXIO_CLKOUT_125MHZ);
+	if (ret)
+		goto err_clk;
+
+	phy_write(phydev, MAXIO_PAGE_SELECT, 0x0);
+	ret = maxio_self_check(phydev, 50);
+	if (ret)
+		goto err_clk;
+
+	return 0;
+
+err_clk:
+	if (priv->refclk)
+		clk_disable_unprepare(priv->refclk);
+	return ret;
+}
+
+static int maxio_mae0621a_resume(struct phy_device *phydev)
+{
+	struct maxio_priv *priv = phydev->priv;
+	int ret;
+
+	/* re-enable reference clock */
+	if (priv->refclk) {
+		ret = clk_prepare_enable(priv->refclk);
+		if (ret)
+			return ret;
+	}
+
+	ret = genphy_resume(phydev);
+	if (ret)
+		goto err_clk;
+
+	/* soft reset */
+	ret = phy_write(phydev, MII_BMCR, BMCR_RESET | phy_read(phydev, MII_BMCR));
+	if (ret)
+		goto err_clk;
+
+	msleep(5);
+	return 0;
+
+err_clk:
+	if (priv->refclk)
+		clk_disable_unprepare(priv->refclk);
+	return ret;
+}
+
+static int maxio_mae0621a_suspend(struct phy_device *phydev)
+{
+	struct maxio_priv *priv = phydev->priv;
+	int ret;
+
+	ret = genphy_suspend(phydev);
+	if (ret)
+		return ret;
+
+	/* back to page 0 */
+	ret = phy_write(phydev, MAXIO_PAGE_SELECT, 0);
+	if (ret)
+		return ret;
+
+	/* disable reference clock */
+	if (priv->refclk)
+		clk_disable_unprepare(priv->refclk);
+
+	return 0;
+}
+
+static int maxio_mae0621a_status(struct phy_device *phydev)
+{
+	return genphy_read_status(phydev);
+}
+
+static int maxio_mae0621a_probe(struct phy_device *phydev)
+{
+	struct maxio_priv *priv;
+	int ret;
+
+	priv = devm_kzalloc(&phydev->mdio.dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+
+	/* get reference clock from device tree */
+	priv->refclk = devm_clk_get_optional(&phydev->mdio.dev, NULL);
+	if (IS_ERR(priv->refclk)) {
+		ret = PTR_ERR(priv->refclk);
+		dev_err(&phydev->mdio.dev, "Failed to get reference clock: %d\n", ret);
+		return ret;
+	}
+
+	phydev->priv = priv;
+
+	ret = maxio_mae0621a_clk_init(phydev);
+	if (ret)
+		return ret;
+
+	msleep(5);
+	return 0;
+}
+
+static int maxio_mae0621aq3ci_config_init(struct phy_device *phydev)
+{
+	struct maxio_priv *priv = phydev->priv;
+	struct device *dev = &phydev->mdio.dev;
+	int ret;
+
+	/* enable reference clock */
+	if (priv->refclk) {
+		ret = clk_prepare_enable(priv->refclk);
+		if (ret) {
+			dev_err(dev, "Failed to enable reference clock: %d\n", ret);
+			return ret;
+		}
+	}
+
+	/* mdc configuration */
+	ret = maxio_write_paged(phydev, 0xdab, 0x17, MAXIO_MDC_CONFIG);
+	if (ret)
+		goto err_clk;
+
+	/* auto speed down enable */
+	ret = maxio_write_paged(phydev, 0xd8f, 0x10, MAXIO_AUTO_DOWNSHIFT);
+	if (ret)
+		goto err_clk;
+
+	/* adjust ANE */
+	ret = maxio_write_paged(phydev, 0xd96, 0x15, 0xc08a);
+	if (ret)
+		goto err_clk;
+	ret = maxio_write_paged(phydev, 0xda4, 0x12, MAXIO_ANE_ADJ3);
+	if (ret)
+		goto err_clk;
+	ret = maxio_write_paged(phydev, 0xd8f, 0x16, MAXIO_ANE_ADJ4);
+	if (ret)
+		goto err_clk;
+	ret = maxio_write_paged(phydev, 0xd90, 0x16, MAXIO_ANE_ADJ1);
+	if (ret)
+		goto err_clk;
+	ret = maxio_write_paged(phydev, 0xd92, 0x11, MAXIO_ANE_ADJ2);
+	if (ret)
+		goto err_clk;
+	ret = maxio_write_paged(phydev, 0xd96, 0x16, 0x4010);
+	if (ret)
+		goto err_clk;
+	ret = maxio_write_paged(phydev, 0xda5, 0x11, 0x4a12);
+	if (ret)
+		goto err_clk;
+	ret = maxio_write_paged(phydev, 0xda5, 0x12, 0x4a12);
+	if (ret)
+		goto err_clk;
+	ret = maxio_write_paged(phydev, 0xda8, 0x11, 0x175);
+	if (ret)
+		goto err_clk;
+	ret = maxio_write_paged(phydev, 0xd99, 0x16, MAXIO_ANE_ADJ6);
+	if (ret)
+		goto err_clk;
+	ret = maxio_write_paged(phydev, 0xd95, 0x13, MAXIO_ANE_ADJ7);
+	if (ret)
+		goto err_clk;
+
+	/* configure 125 MHz clock output */
+	ret = maxio_write_paged(phydev, 0xa43, 0x19, MAXIO_CLKOUT_125MHZ);
+	if (ret)
+		goto err_clk;
+
+	/* soft reset */
+	ret = maxio_write_paged(phydev, 0x0, 0x0, 0x9140);
+	if (ret)
+		goto err_clk;
+
+	/* back to page 0 */
+	ret = phy_write(phydev, MAXIO_PAGE_SELECT, 0);
+	if (ret)
+		goto err_clk;
+
+	/* configure leds */
+	ret = maxio_write_paged(phydev, 0xd04, 0x10,
+				MAXIO_MAE0621A_LCR_LED2_ACT |
+				MAXIO_MAE0621A_LCR_LED2_LINK1000 |
+				MAXIO_MAE0621A_LCR_LED1_LINK1000 |
+				MAXIO_MAE0621A_LCR_LED1_LINK100 |
+				MAXIO_MAE0621A_LCR_LED1_LINK10);
+	if (ret)
+		goto err_clk;
+
+	return 0;
+
+err_clk:
+	if (priv->refclk)
+		clk_disable_unprepare(priv->refclk);
+	return ret;
+}
+
+static int maxio_mae0621aq3ci_resume(struct phy_device *phydev)
+{
+	struct maxio_priv *priv = phydev->priv;
+	int ret;
+
+	/* re-enable reference clock */
+	if (priv->refclk) {
+		ret = clk_prepare_enable(priv->refclk);
+		if (ret)
+			return ret;
+	}
+
+	ret = genphy_resume(phydev);
+	if (ret)
+		goto err_clk;
+
+	ret = maxio_write_paged(phydev, 0xdaa, 0x17, 0x1001);
+	if (ret)
+		goto err_clk;
+
+	/* led configuration */
+	ret = maxio_write_paged(phydev, 0xdab, 0x15, 0x0);
+	if (ret)
+		goto err_clk;
+
+	ret = phy_write(phydev, MAXIO_PAGE_SELECT, 0);
+	if (ret)
+		goto err_clk;
+
+	return 0;
+
+err_clk:
+	if (priv->refclk)
+		clk_disable_unprepare(priv->refclk);
+	return ret;
+}
+
+static int maxio_mae0621aq3ci_suspend(struct phy_device *phydev)
+{
+	struct maxio_priv *priv = phydev->priv;
+	int ret;
+
+	ret = maxio_write_paged(phydev, 0xdaa, 0x17, 0x1011);
+	if (ret)
+		return ret;
+
+	/* led configuration */
+	ret = maxio_write_paged(phydev, 0xdab, 0x15, 0x5550);
+	if (ret)
+		return ret;
+
+	/* back to page 0 */
+	ret = phy_write(phydev, MAXIO_PAGE_SELECT, 0);
+	if (ret)
+		return ret;
+
+	ret = genphy_suspend(phydev);
+	if (ret)
+		return ret;
+
+	/* disable reference clock */
+	if (priv->refclk)
+		clk_disable_unprepare(priv->refclk);
+
+	return 0;
+}
+
+static struct phy_driver maxio_nc_drvs[] = {
+	{
+		PHY_ID_MATCH_EXACT(MAXIO_PHY_MAE0621A_Q2C_ID),
+		.name		= "MAE0621A-Q2C Gigabit Ethernet",
+		.features	= PHY_GBIT_FEATURES,
+		.probe		= maxio_mae0621a_probe,
+		.config_init	= maxio_mae0621a_config_init,
+		.config_aneg	= maxio_mae0621a_config_aneg,
+		.read_status	= maxio_mae0621a_status,
+		.suspend	= maxio_mae0621a_suspend,
+		.resume		= maxio_mae0621a_resume,
+	},
+	{
+		PHY_ID_MATCH_EXACT(MAXIO_PHY_MAE0621A_Q3C_ID),
+		.name		= "MAE0621A/B-Q3C(I) Gigabit Ethernet",
+		.features	= PHY_GBIT_FEATURES,
+		.probe		= maxio_mae0621a_probe,
+		.config_init	= maxio_mae0621aq3ci_config_init,
+		.suspend	= maxio_mae0621aq3ci_suspend,
+		.resume		= maxio_mae0621aq3ci_resume,
+	},
+};
+
+module_phy_driver(maxio_nc_drvs);
+
+static struct mdio_device_id __maybe_unused maxio_nc_tbl[] = {
+	{ PHY_ID_MATCH_EXACT(MAXIO_PHY_MAE0621A_Q2C_ID) },
+	{ PHY_ID_MATCH_EXACT(MAXIO_PHY_MAE0621A_Q3C_ID) },
+	{ }
+};
+
+MODULE_DEVICE_TABLE(mdio, maxio_nc_tbl);
+
+MODULE_DESCRIPTION("Maxio PHY driver");
+MODULE_AUTHOR("Zhao Yang <yang_zhao@maxio-tech.com>");
+MODULE_AUTHOR("John Clark <inindev@gmail.com>");
+MODULE_LICENSE("GPL");
-- 
2.47.3

